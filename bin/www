#!/usr/bin/env node

/* eslint-disable no-use-before-define */

/**
 * Module dependencies.
 */
const http = require('http');
const debug = require('debug')('component:bin');

const app = require('../src/app');

/**
<<<<<<< HEAD
 * Get port from environment and store in Express.
 */
const port = process.env.PORT || '3000';
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

const io = require('socket.io')(server, {
  pingTimeout: 60000,
  pingInterval: 25000,
  cors: {
    origin: '*',
  },
});

io.on('connection', (socket) => {
  socket.on('join', (userData) => {
    //
    socket.join(userData._id);
    //
    socket.emit('connected');
  });

  socket.on('join chat', (room) => {
    socket.join(room._id);
  });

  //send message
  socket.on('send message', (messageDetails) => {
    //
    console.log(messageDetails);
    socket.in(messageDetails.receiverID).emit('new message', messageDetails);
  });

  socket.on('typing', (room) => {
    socket.in(room).emit('typing', room);
  });
  socket.on('stopTyping', (room) => {
    socket.in(room).emit('stopTyping', room);
  });
  socket.on('entered in the chat', (chatInfo) => {
    console.log(chatInfo);
    socket.in(chatInfo.receiverID).emit('mark all as read', chatInfo);
  });
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
